//
//  WeatherAPI
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
//
#import <Foundation/Foundation.h>
#import "Configuration.h"
#import "APIHelper.h"
#import "APIError.h"
#import "BaseController.h"
#import "UnirestClient.h"
#import "HttpContext.h"
#import "NSDate+extension.h"
#import "CurrentJsonResponse.h"
#import "ForecastJsonResponse.h"
#import "HistoryJsonResponse.h"
#import "SearchJsonResponse.h"
#import "IpJsonResponse.h"
#import "TimezoneJsonResponse.h"
#import "AstronomyJsonResponse.h"

@interface APIsController : BaseController

/**
* Completion block definition for asynchronous call to realtime-weather */
typedef void (^CompletedGetRealtimeWeather)(BOOL success, HttpContext* context, CurrentJsonResponse* response, NSError* error);

/**
* Current weather or realtime weather API method allows a user to get up to date current weather information in json and xml. The data is returned as a Current Object.Current object contains current or realtime weather information for a given city.
* @param    q    Required parameter: Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.
* @param    lang    Optional parameter: Returns 'condition:text' field in API in the desired language. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check 'lang-code'.
*/
- (void) getRealtimeWeatherAsyncWithQ:(NSString*) q
                lang:(NSString*) lang
                completionBlock:(CompletedGetRealtimeWeather) onCompleted;

/**
* Completion block definition for asynchronous call to forecast-weather */
typedef void (^CompletedGetForecastWeather)(BOOL success, HttpContext* context, ForecastJsonResponse* response, NSError* error);

/**
* Forecast weather API method returns upto next 10 day weather forecast and weather alert as json. The data is returned as a Forecast Object.<br />Forecast object contains astronomy data, day weather forecast and hourly interval weather information for a given city.
* @param    q    Required parameter: Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.
* @param    days    Required parameter: Number of days of weather forecast. Value ranges from 1 to 10
* @param    dt    Optional parameter: Date should be between today and next 10 day in yyyy-MM-dd format
* @param    unixdt    Optional parameter: Please either pass 'dt' or 'unixdt' and not both in same request.<br />unixdt should be between today and next 10 day in Unix format
* @param    hour    Optional parameter: Must be in 24 hour. For example 5 pm should be hour=17, 6 am as hour=6
* @param    lang    Optional parameter: Returns 'condition:text' field in API in the desired language. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check 'lang-code'.
*/
- (void) getForecastWeatherAsyncWithQ:(NSString*) q
                days:(int) days
                dt:(NSDate*) dt
                unixdt:(NSNumber*) unixdt
                hour:(NSNumber*) hour
                lang:(NSString*) lang
                completionBlock:(CompletedGetForecastWeather) onCompleted;

/**
* Completion block definition for asynchronous call to history-weather */
typedef void (^CompletedGetHistoryWeather)(BOOL success, HttpContext* context, HistoryJsonResponse* response, NSError* error);

/**
* History weather API method returns historical weather for a date on or after 1st Jan, 2015 as json. The data is returned as a Forecast Object.
* @param    q    Required parameter: Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.
* @param    dt    Required parameter: Date on or after 1st Jan, 2015 in yyyy-MM-dd format
* @param    unixdt    Optional parameter: Please either pass 'dt' or 'unixdt' and not both in same request.<br />unixdt should be on or after 1st Jan, 2015 in Unix format
* @param    endDt    Optional parameter: Date on or after 1st Jan, 2015 in yyyy-MM-dd format'end_dt' should be greater than 'dt' parameter and difference should not be more than 30 days between the two dates.
* @param    unixendDt    Optional parameter: Date on or after 1st Jan, 2015 in Unix Timestamp format<br />unixend_dt has same restriction as 'end_dt' parameter. Please either pass 'end_dt' or 'unixend_dt' and not both in same request. e.g.: unixend_dt=1490227200
* @param    hour    Optional parameter: Must be in 24 hour. For example 5 pm should be hour=17, 6 am as hour=6
* @param    lang    Optional parameter: Returns 'condition:text' field in API in the desired language. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check 'lang-code'.
*/
- (void) getHistoryWeatherAsyncWithQ:(NSString*) q
                dt:(NSDate*) dt
                unixdt:(NSNumber*) unixdt
                endDt:(NSDate*) endDt
                unixendDt:(NSNumber*) unixendDt
                hour:(NSNumber*) hour
                lang:(NSString*) lang
                completionBlock:(CompletedGetHistoryWeather) onCompleted;

/**
* Completion block definition for asynchronous call to search-autocomplete-weather */
typedef void (^CompletedGetSearchAutocompleteWeather)(BOOL success, HttpContext* context, NSArray<SearchJsonResponse> * response, NSError* error);

/**
* WeatherAPI.com Search or Autocomplete API returns matching cities and towns as an array of Location object.
* @param    q    Required parameter: Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.
*/
- (void) searchAutocompleteWeatherAsyncWithQ:(NSString*) q
                completionBlock:(CompletedGetSearchAutocompleteWeather) onCompleted;

/**
* Completion block definition for asynchronous call to ip-lookup */
typedef void (^CompletedGetIpLookup)(BOOL success, HttpContext* context, IpJsonResponse* response, NSError* error);

/**
* IP Lookup API method allows a user to get up to date information for an IP address.
* @param    q    Required parameter: Pass IP address.
*/
- (void) getIpLookupAsyncWithQ:(NSString*) q
                completionBlock:(CompletedGetIpLookup) onCompleted;

/**
* Completion block definition for asynchronous call to time-zone */
typedef void (^CompletedGetTimeZone)(BOOL success, HttpContext* context, TimezoneJsonResponse* response, NSError* error);

/**
* Return Location Object
* @param    q    Required parameter: Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.
*/
- (void) getTimeZoneAsyncWithQ:(NSString*) q
                completionBlock:(CompletedGetTimeZone) onCompleted;

/**
* Completion block definition for asynchronous call to astronomy */
typedef void (^CompletedGetAstronomy)(BOOL success, HttpContext* context, AstronomyJsonResponse* response, NSError* error);

/**
* Return Location and Astronomy Object
* @param    q    Required parameter: Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.
* @param    dt    Required parameter: Date on or after 1st Jan, 2015 in yyyy-MM-dd format
*/
- (void) getAstronomyAsyncWithQ:(NSString*) q
                dt:(NSDate*) dt
                completionBlock:(CompletedGetAstronomy) onCompleted;

@end